// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_simulation_cpp
int run_simulation_cpp(Rcpp::IntegerVector flags, Rcpp::NumericVector hostPopn, Rcpp::NumericMatrix vlPars, Rcpp::NumericMatrix infectiousnessPars, Rcpp::NumericMatrix crossImmunity, int day, int final_day, std::vector<std::string> output_files, bool VERBOSE, SEXP callback);
RcppExport SEXP _driftSim_run_simulation_cpp(SEXP flagsSEXP, SEXP hostPopnSEXP, SEXP vlParsSEXP, SEXP infectiousnessParsSEXP, SEXP crossImmunitySEXP, SEXP daySEXP, SEXP final_daySEXP, SEXP output_filesSEXP, SEXP VERBOSESEXP, SEXP callbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hostPopn(hostPopnSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type vlPars(vlParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type infectiousnessPars(infectiousnessParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type crossImmunity(crossImmunitySEXP);
    Rcpp::traits::input_parameter< int >::type day(daySEXP);
    Rcpp::traits::input_parameter< int >::type final_day(final_daySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type output_files(output_filesSEXP);
    Rcpp::traits::input_parameter< bool >::type VERBOSE(VERBOSESEXP);
    Rcpp::traits::input_parameter< SEXP >::type callback(callbackSEXP);
    rcpp_result_gen = Rcpp::wrap(run_simulation_cpp(flags, hostPopn, vlPars, infectiousnessPars, crossImmunity, day, final_day, output_files, VERBOSE, callback));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_driftSim_run_simulation_cpp", (DL_FUNC) &_driftSim_run_simulation_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_driftSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
